# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'

pool:
  vmImage: ubuntu-latest

steps:
#- script: echo Hello, world!
#  displayName: 'Run a one-line script'

#- script: |
#    echo Add other tasks to build, test, and deploy your project.
#    echo See https://aka.ms/yaml
#  displayName: 'Run a multi-line script'

##########################################################
# Realizamos an치lisis de c칩digo est치tico con SonarCloud
##########################################################
#- task: SonarCloudPrepare@1
#  displayName: Configurar SonarCloud
#  inputs:
#    SonarCloud: 'sonarcloud'
#    organization: 'devops-ort-g2'
#    scannerMode: 'Other'

#- script: mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=DevOps-ORT-G2_products-service
#  displayName: 'Ejecutar an치lisis de SonarCloud'

#- task: SonarCloudPublish@1
#  displayName: Publicar resultado en el resultado del pipeline
#  inputs:
#    pollingTimeoutSec: '300'



##########################################################
# AGREGAR CONTROL DE FAIL PARA SONARCLOUD
##########################################################



##########################################################
# Buildeamos el JAR
##########################################################

- script: mvn install
  displayName: Generar build del jar
    
##########################################################
# Buildeamos imagen docker
##########################################################

- task: Docker@1
  displayName: Realizar build de imagen docker
  inputs:
    command: 'Build an image'
    dockerFile: '**/Dockerfile'
    arguments: '--build-arg JAR_FILE=target/products-service-example-0.0.1-SNAPSHOT.jar'
    imageName: 'products-service'

- script: docker run -d --name products-service-test products-service
  displayName: Levantar docker 

- script: docker inspect products-service-test | grep '"IPAddress":' -A 0 -m 1 | cut -f4 -d'"' 
  displayName: ip del docker

# crear api gateway para tener un unico punto de acceso
- script: |
    conf="upstream products {
    >server 172.17.0.2:8080;
    >}
    >
    >server {
    > access_log /var/log/nginx/api_access.log main; # Each API may also log to a separate file
    >
    > listen 80;
    > server_name _;
    >
    ># URI routing
    >#
    >
    > location /products {
    >      proxy_pass http://products/products/;
    > }
    >}"
    docker pull nginx:1.21
    mkdir nginx-conf
    echo "$conf" > nginx-conf/api_gateway.conf
    cat nginx-conf/api_gateway.conf
    docker run --name api-gateway -v /home/vsts/work/1/s/nginx-conf/:/etc/nginx/conf.d/ -d nginx:1.21
    
  displayName: 'Disponibilizo api_gateway'

- script: docker inspect api-gateway
  displayName: ip del docker api-gateway

- script: | 
    content=$(curl -L http://172.17.0.3/products/)
    echo $content
  displayName: prueba curl

#- script: docker run -d --name products-service-test products-service
#  displayName: levanto docker  manual

- script: docker ps -a
  displayName: hay docker levantado?
    
##########################################################
# Pusheamos la imagen de docker al ECR
##########################################################
#- task: ECRPushImage@1
#  inputs:
#    awsCredentials: 'AWS'
#    regionName: 'us-east-1'
#    imageSource: 'imagename'
#    sourceImageName: 'products-service'
#    repositoryName: 'products-service'
    