# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'

pool:
  vmImage: ubuntu-latest

steps:
#- script: echo Hello, world!
#  displayName: 'Run a one-line script'

#- script: |
#    echo Add other tasks to build, test, and deploy your project.
#    echo See https://aka.ms/yaml
#  displayName: 'Run a multi-line script'

##########################################################
# Realizamos análisis de código estático con SonarCloud
##########################################################
- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'sonarcloud'
    organization: 'devops-ort-g2'
    scannerMode: 'Other'

- script: mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=DevOps-ORT-G2_products-service
  displayName: 'Run SonarCloud analyze'

- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'



##########################################################
# AGREGAR CONTROL DE FAIL PARA SONARCLOUD
##########################################################



##########################################################
# Buildeamos el JAR
##########################################################

- script: mvn install
  displayName: Genero build del jar
    



##########################################################
# Buildeamos imagen docker
##########################################################
- task: Docker@1
  displayName: Build an image
  inputs:
    command: 'Build an image'
    dockerFile: '**/Dockerfile'
    arguments: '--build-arg JAR_FILE=products-service-example.jar'
    imageName: 'products-service'

- task: Docker@2
  inputs:
    command: 'start'
    arguments: '-d --name products-service-test products-service'
    addPipelineData: false
    addBaseImageData: false

- script: docker ps -a
  displayName: hay docker levantado?
    
##########################################################
# Pusheamos la imagen de docker al ECR
##########################################################
#- task: ECRPushImage@1
#  inputs:
#    awsCredentials: 'AWS'
#    regionName: 'us-east-1'
#    imageSource: 'imagename'
#    sourceImageName: 'products-service'
#    repositoryName: 'products-service'
    